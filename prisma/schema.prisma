// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider          = "mysql" 
  url               =  env("DATABASE_URL") 
  shadowDatabaseUrl =  env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Amenity {
  id             String @id @default(uuid())
  name           String
  properties     Property[]
}

model Booking {
  id             String @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Int
  bookingStatus  String

  user           User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  properties     Property @relation(fields: [propertyId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
  @@index([propertyId])
  
}

model Host {
  id             String @id @default(uuid())
  username       String @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String?
  aboutMe        String
  properties     Property[]
}

model Property {
  id             String @id @default(uuid())
  title          String
  description    String
  location       String
  pricePerNight  Decimal @db.Decimal(10, 2)
  bedroomCount   Int
  bathRoomCount  Int
  maxGuestCount  Int
  hostId         String
  rating         Int

  amenities      Amenity[]
  bookings       Booking[]
  reviews        Review[]
  
  host Host @relation(fields: [hostId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([hostId])
  @@index([title])
  @@index([location])
}

model Review {
  id             String @id @default(uuid())
  userId         String?
  propertyId     String?
  rating         Int?
  comment        String?

  user           User?     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade) 
  properties     Property? @relation(fields: [propertyId], references: [id], onUpdate: Cascade, onDelete: Cascade) 

  @@index([userId])
  @@index([propertyId]) 
}

model User {
  id             String @id @default(uuid())
  username       String @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String?
  bookings       Booking[]
  reviews        Review[]
}

enum ItemType {
  pending
  confirmed
  cancelled
}